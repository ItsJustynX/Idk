<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>XOR Obfuscator with Base64 & Export</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; max-width: 900px; }
    textarea { width: 100%; height: 200px; font-family: monospace; font-size: 14px; }
    button, input[type="number"] { margin: 10px 5px 20px 0; padding: 10px 20px; font-size: 16px; }
    label { font-weight: bold; }
    #options { margin-top: 10px; }
  </style>
</head>
<body>

<h1>XOR Obfuscator (Base64 + Lua File Export)</h1>

<label for="inputCode">Input Lua Code:</label>
<textarea id="inputCode" placeholder="Paste your Lua code here..."></textarea>

<div id="options">
  <label for="xorKey">XOR Key (1–255):</label>
  <input type="number" id="xorKey" min="1" max="255" placeholder="Random" />
  <label><input type="checkbox" id="useBase64" /> Add Base64 Encoding</label>
  <label><input type="checkbox" id="prettyFormat" /> Pretty Format</label>
</div>

<button id="obfuscateBtn">Obfuscate</button>
<button id="downloadBtn">Download .lua</button>
<button id="copyBtn">Copy Output</button>

<h2>Obfuscated Output:</h2>
<textarea id="output" readonly></textarea>

<script>
function toHex(str) {
  return Array.from(str).map(c =>
    c.charCodeAt(0).toString(16).padStart(2, '0')
  ).join('');
}

function xorEncrypt(str, key) {
  return Array.from(str).map(c =>
    String.fromCharCode(c.charCodeAt(0) ^ key)
  ).join('');
}

function base64Encode(str) {
  return btoa(str);
}

function randomVar() {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const len = Math.floor(Math.random() * 6) + 10;
  return Array.from({ length: len }, () =>
    chars[Math.floor(Math.random() * chars.length)]
  ).join('');
}

function generateLoaderRoblox(dataStr, key, useBase64, pretty = false) {
  const v = {
    str: randomVar(),
    key: randomVar(),
    out: randomVar(),
    i: randomVar(),
    b1: randomVar(),
    b2: randomVar(),
    f: randomVar(),
    err: randomVar(),
  };

  let lua = "";

  if (useBase64) {
    // Lua Base64 decoder for Roblox (short, clean version)
    lua = `
(function()
  local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' 
  function base64decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
      if (x == '=') then return '' end
      local r,f='',(b:find(x)-1)
      for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
      return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
      if (#x ~= 8) then return '' end
      local c=0
      for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
      return string.char(c)
    end))
  end

  local ${v.str} = base64decode("${dataStr}")
  local ${v.key} = ${key}
  local ${v.out} = ""
  for ${v.i} = 1, #${v.str} do
    local ${v.b1} = string.byte(${v.str}, ${v.i})
    local ${v.b2} = bit32.bxor(${v.b1}, ${v.key})
    ${v.out} = ${v.out} .. string.char(${v.b2})
  end
  local ${v.f}, ${v.err} = loadstring(${v.out})
  if not ${v.f} then error("Obfuscation failed: " .. tostring(${v.err})) end
  return ${v.f}()
end)()
    `;
  } else {
    // Raw XOR hex loader
    lua = `
(function()
  local ${v.str} = "${dataStr}"
  local ${v.key} = ${key}
  local ${v.out} = ""
  for ${v.i} = 1, #${v.str}, 2 do
    local ${v.b1} = tonumber(string.sub(${v.str}, ${v.i}, ${v.i}+1), 16)
    local ${v.b2} = bit32.bxor(${v.b1}, ${v.key})
    ${v.out} = ${v.out} .. string.char(${v.b2})
  end
  local ${v.f}, ${v.err} = loadstring(${v.out})
  if not ${v.f} then error("Obfuscation failed: " .. tostring(${v.err})) end
  return ${v.f}()
end)()
    `;
  }

  return pretty ? lua.trim() : lua.replace(/\s+/g, ' ').replace(/ ?\n ?/g, '');
}

document.getElementById('obfuscateBtn').addEventListener('click', () => {
  const input = document.getElementById('inputCode').value;
  if (!input.trim()) return alert('Paste Lua code first.');

  let key = document.getElementById('xorKey').value.trim();
  if (!key) key = Math.floor(Math.random() * 255) + 1;
  key = Number(key);
  if (isNaN(key) || key < 1 || key > 255) return alert('XOR key must be 1–255.');

  const useBase64 = document.getElementById('useBase64').checked;
  const pretty = document.getElementById('prettyFormat').checked;

  const encrypted = xorEncrypt(input, key);
  const finalData = useBase64 ? base64Encode(encrypted) : toHex(encrypted);

  const output = generateLoaderRoblox(finalData, key, useBase64, pretty);
  document.getElementById('output').value = output;
});

document.getElementById('copyBtn').addEventListener('click', async () => {
  const output = document.getElementById('output').value;
  if (!output) return alert('Nothing to copy.');
  try {
    await navigator.clipboard.writeText(output);
    alert('Copied!');
  } catch (e) {
    alert('Failed to copy: ' + e);
  }
});

document.getElementById('downloadBtn').addEventListener('click', () => {
  const output = document.getElementById('output').value;
  if (!output) return alert('Nothing to download.');

  const blob = new Blob([output], { type: 'text/plain' });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = 'obfuscated.lua';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
});
</script>

</body>
</html>
